1.数组：一种线性表数据结构。它用一组连续的内存控件，来存储一组具有相同结构的数据
    特点：导致插入、删除两个操作比较低效
    问题：1.警惕数组越界问题
         2.容器能否完全代替数组

2.链表：链表通过指针将一组零散的内存块串联起来
    特点：快速的插入和删除操作
    应用：LRU缓存淘汰算法
    链表代码的写出

3.栈：后进者先出，先出点后出，就是典型的栈结构
    应用：实现浏览器的前进和后退功能

4.队列：先进者后出，就是典型的队列。


5.递归：
    1.递归需要满足的三个条件
        1.一个问题的解可以分解为几个子问题的解
        2.这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样。
        3.存在递归终止条件
    2.递归代码最关键是写出递推公式，找到终止条件

6.排序：
    1.冒泡、插入、选择 O(n)
    2.快速、归并 O(nlogn)
    3.桶、计数、基数 O(n)

    分析一个排序算法：
        1.最好情况、最坏情况、平均情况时间复杂度
        2.时间复杂度的系数、常数、低阶
        3.比较次数和交换次数

7.跳表：链表加多级索引的结构，就是跳表



8.散列表：散列表用的是数组支持按照下标随机访问数据的特性，所以散列表其实就是数组的一种扩展，由数组演化而来。可以说，如果没有数组，就没有散列表。
    1.散列冲突：
        1.开放寻址
        2.链表法
    2.如何设计散列函数
        1.散列函数不能太复杂
        2.散列生成的值要尽可能随机并且均匀分布


9.哈希算法


10.二叉树：非线性的表结构
    1.父节点、子节点、兄弟节点   根节点和叶节点
    2.定义：每个节点最多有两个节点
    3.满二叉树 完全二叉树
    4. 前序遍历 对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。
       中序遍历 对于树中的任意节点来说，先打印它的左子树，然后再打印它本身，最后打印它的右子树
       后序遍历 对于树中的任意节点来说，先打印它的左子树，然后再打印它的右子树，最后打印这个节点本身

       二叉树前、中、后序遍历就是一个递归的过程
    5.二叉查找树 ：时间复杂度跟树的高度成正比
        1.查找
        2.插入
        3.删除:
            三种情况：

11.红黑树
    1.根节点是黑色的；
    2.每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据；
    3.任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；
    4.每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点


12.递归树


13.堆排序


14字符串匹配基础